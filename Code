import sys
import os
import random
import requests
import eyed3
from PyQt6.QtWidgets import (
    QApplication, QWidget, QPushButton, QListWidget, QFileDialog,
    QVBoxLayout, QSlider, QLabel, QHBoxLayout, QLineEdit
)
from PyQt6.QtCore import Qt, QTimer
from PyQt6.QtGui import QPixmap
from pygame import mixer
from mutagen.mp3 import MP3

class UltimateMusicPlayer(QWidget):
    def __init__(self):
        super().__init__()
        self.initUI()
        mixer.init()
        self.current_index = -1
        self.is_shuffling = False
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.update_progress)
        self.songs = []

    def initUI(self):
        self.setWindowTitle("Ultimate Music Player üéµ")
        self.setGeometry(100, 100, 650, 750)
        self.setStyleSheet("background-color: #1c1c1c; color: white; font-size: 14px;")

        layout = QVBoxLayout()

        # Search Bar
        self.search_bar = QLineEdit()
        self.search_bar.setPlaceholderText("üîç Search Songs...")
        self.search_bar.textChanged.connect(self.search_song)
        layout.addWidget(self.search_bar)

        # Now Playing
        self.now_playing = QLabel("Now Playing: None")
        self.now_playing.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.now_playing.setStyleSheet("font-size: 18px; font-weight: bold;")
        layout.addWidget(self.now_playing)

        # Album Art
        self.album_art = QLabel(self)
        self.album_art.setAlignment(Qt.AlignmentFlag.AlignCenter)
        default_pixmap = QPixmap("default_cover.png")
        if default_pixmap.isNull():
            default_pixmap = QPixmap(250, 250)  # Create a blank image
            default_pixmap.fill(Qt.GlobalColor.black)
        self.album_art.setPixmap(default_pixmap.scaled(250, 250))
        layout.addWidget(self.album_art)

        # Song List
        self.song_list = QListWidget()
        self.song_list.setDragDropMode(QListWidget.DragDropMode.InternalMove)
        layout.addWidget(self.song_list)

        # Progress Bar
        self.progress_slider = QSlider(Qt.Orientation.Horizontal)
        self.progress_slider.setRange(0, 100)
        self.progress_slider.sliderMoved.connect(self.set_progress)  # Fixed missing method
        layout.addWidget(self.progress_slider)

        # Playback Controls
        btn_layout = QHBoxLayout()

        self.add_button = QPushButton("‚ûï Add Songs")
        self.add_button.clicked.connect(self.add_songs)
        btn_layout.addWidget(self.add_button)

        self.play_button = QPushButton("‚ñ∂ Play")
        self.play_button.clicked.connect(self.play_song)
        btn_layout.addWidget(self.play_button)

        self.pause_button = QPushButton("‚è∏ Pause")
        self.pause_button.clicked.connect(self.pause_song)
        btn_layout.addWidget(self.pause_button)

        self.resume_button = QPushButton("‚èØ Resume")
        self.resume_button.clicked.connect(self.resume_song)
        btn_layout.addWidget(self.resume_button)

        self.stop_button = QPushButton("‚èπ Stop")
        self.stop_button.clicked.connect(self.stop_song)
        btn_layout.addWidget(self.stop_button)

        layout.addLayout(btn_layout)

        # Next & Previous
        nav_layout = QHBoxLayout()
        self.prev_button = QPushButton("‚èÆ Prev")
        self.prev_button.clicked.connect(self.previous_song)
        nav_layout.addWidget(self.prev_button)

        self.next_button = QPushButton("‚è≠ Next")
        self.next_button.clicked.connect(self.next_song)
        nav_layout.addWidget(self.next_button)

        layout.addLayout(nav_layout)

        # Shuffle Button
        self.shuffle_button = QPushButton("üîÄ Shuffle")
        self.shuffle_button.clicked.connect(self.toggle_shuffle)
        layout.addWidget(self.shuffle_button)

        # Volume Slider
        self.volume_slider = QSlider(Qt.Orientation.Horizontal)
        self.volume_slider.setRange(0, 100)
        self.volume_slider.setValue(50)
        self.volume_slider.valueChanged.connect(self.set_volume)
        layout.addWidget(self.volume_slider)

        self.setLayout(layout)

    def add_songs(self):
        files, _ = QFileDialog.getOpenFileNames(self, "Select Audio Files", "", "Audio Files (*.mp3 *.wav *.flac *.aac)")
        if files:
            self.songs.extend(files)
            for song in files:
                metadata = eyed3.load(song)
                title = metadata.tag.title if metadata and metadata.tag and metadata.tag.title else os.path.basename(song)
                self.song_list.addItem(title)

    def play_song(self):
        if self.song_list.currentRow() >= 0:
            self.current_index = self.song_list.currentRow()
            self.load_and_play(self.songs[self.current_index])

    def load_and_play(self, song_path):
        mixer.music.load(song_path)
        mixer.music.play()
        self.now_playing.setText(f"Now Playing: {os.path.basename(song_path)}")
        mixer.music.set_volume(self.volume_slider.value() / 100)
        self.timer.start(1000)  # Update progress every second

    def pause_song(self):
        mixer.music.pause()

    def resume_song(self):
        mixer.music.unpause()

    def stop_song(self):
        mixer.music.stop()
        self.now_playing.setText("Now Playing: None")

    def next_song(self):
        if self.songs:
            self.current_index = (self.current_index + 1) % len(self.songs)
            self.load_and_play(self.songs[self.current_index])
            self.song_list.setCurrentRow(self.current_index)

    def previous_song(self):
        if self.songs:
            self.current_index = (self.current_index - 1) % len(self.songs)
            self.load_and_play(self.songs[self.current_index])
            self.song_list.setCurrentRow(self.current_index)

    def toggle_shuffle(self):
        self.is_shuffling = not self.is_shuffling
        if self.is_shuffling:
            random.shuffle(self.songs)
            self.song_list.clear()
            for song in self.songs:
                self.song_list.addItem(os.path.basename(song))
        print("Shuffle:", self.is_shuffling)

    def set_volume(self, value):
        mixer.music.set_volume(value / 100)

    def search_song(self):
        search_text = self.search_bar.text().lower()
        for i in range(self.song_list.count()):
            item = self.song_list.item(i)
            item.setHidden(search_text not in item.text().lower())

    def update_progress(self):
        if mixer.music.get_busy():
            current_pos = mixer.music.get_pos() // 1000
            song_length = MP3(self.songs[self.current_index]).info.length
            progress = int((current_pos / song_length) * 100)
            self.progress_slider.setValue(progress)

    def set_progress(self, value):
        """Seek to a specific position in the song."""
        if self.songs:
            song_length = MP3(self.songs[self.current_index]).info.length
            seek_time = (value / 100) * song_length
            mixer.music.play(start=seek_time)

app = QApplication(sys.argv)
window = UltimateMusicPlayer()
window.show()
sys.exit(app.exec())
import sys
import os
import random
import requests
import eyed3
from PyQt6.QtWidgets import (
    QApplication, QWidget, QPushButton, QListWidget, QFileDialog,
    QVBoxLayout, QSlider, QLabel, QHBoxLayout, QLineEdit
)
from PyQt6.QtCore import Qt, QTimer
from PyQt6.QtGui import QPixmap
from pygame import mixer
from mutagen.mp3 import MP3

class UltimateMusicPlayer(QWidget):
    def __init__(self):
        super().__init__()
        self.initUI()
        mixer.init()
        self.current_index = -1
        self.is_shuffling = False
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.update_progress)
        self.songs = []

    def initUI(self):
        self.setWindowTitle("Ultimate Music Player üéµ")
        self.setGeometry(100, 100, 650, 750)
        self.setStyleSheet("background-color: #1c1c1c; color: white; font-size: 14px;")

        layout = QVBoxLayout()

        # Search Bar
        self.search_bar = QLineEdit()
        self.search_bar.setPlaceholderText("üîç Search Songs...")
        self.search_bar.textChanged.connect(self.search_song)
        layout.addWidget(self.search_bar)

        # Now Playing
        self.now_playing = QLabel("Now Playing: None")
        self.now_playing.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.now_playing.setStyleSheet("font-size: 18px; font-weight: bold;")
        layout.addWidget(self.now_playing)

        # Album Art
        self.album_art = QLabel(self)
        self.album_art.setAlignment(Qt.AlignmentFlag.AlignCenter)
        default_pixmap = QPixmap("default_cover.png")
        if default_pixmap.isNull():
            default_pixmap = QPixmap(250, 250)  # Create a blank image
            default_pixmap.fill(Qt.GlobalColor.black)
        self.album_art.setPixmap(default_pixmap.scaled(250, 250))
        layout.addWidget(self.album_art)

        # Song List
        self.song_list = QListWidget()
        self.song_list.setDragDropMode(QListWidget.DragDropMode.InternalMove)
        layout.addWidget(self.song_list)

        # Progress Bar
        self.progress_slider = QSlider(Qt.Orientation.Horizontal)
        self.progress_slider.setRange(0, 100)
        self.progress_slider.sliderMoved.connect(self.set_progress)  # Fixed missing method
        layout.addWidget(self.progress_slider)

        # Playback Controls
        btn_layout = QHBoxLayout()

        self.add_button = QPushButton("‚ûï Add Songs")
        self.add_button.clicked.connect(self.add_songs)
        btn_layout.addWidget(self.add_button)

        self.play_button = QPushButton("‚ñ∂ Play")
        self.play_button.clicked.connect(self.play_song)
        btn_layout.addWidget(self.play_button)

        self.pause_button = QPushButton("‚è∏ Pause")
        self.pause_button.clicked.connect(self.pause_song)
        btn_layout.addWidget(self.pause_button)

        self.resume_button = QPushButton("‚èØ Resume")
        self.resume_button.clicked.connect(self.resume_song)
        btn_layout.addWidget(self.resume_button)

        self.stop_button = QPushButton("‚èπ Stop")
        self.stop_button.clicked.connect(self.stop_song)
        btn_layout.addWidget(self.stop_button)

        layout.addLayout(btn_layout)

        # Next & Previous
        nav_layout = QHBoxLayout()
        self.prev_button = QPushButton("‚èÆ Prev")
        self.prev_button.clicked.connect(self.previous_song)
        nav_layout.addWidget(self.prev_button)

        self.next_button = QPushButton("‚è≠ Next")
        self.next_button.clicked.connect(self.next_song)
        nav_layout.addWidget(self.next_button)

        layout.addLayout(nav_layout)

        # Shuffle Button
        self.shuffle_button = QPushButton("üîÄ Shuffle")
        self.shuffle_button.clicked.connect(self.toggle_shuffle)
        layout.addWidget(self.shuffle_button)

        # Volume Slider
        self.volume_slider = QSlider(Qt.Orientation.Horizontal)
        self.volume_slider.setRange(0, 100)
        self.volume_slider.setValue(50)
        self.volume_slider.valueChanged.connect(self.set_volume)
        layout.addWidget(self.volume_slider)

        self.setLayout(layout)

    def add_songs(self):
        files, _ = QFileDialog.getOpenFileNames(self, "Select Audio Files", "", "Audio Files (*.mp3 *.wav *.flac *.aac)")
        if files:
            self.songs.extend(files)
            for song in files:
                metadata = eyed3.load(song)
                title = metadata.tag.title if metadata and metadata.tag and metadata.tag.title else os.path.basename(song)
                self.song_list.addItem(title)

    def play_song(self):
        if self.song_list.currentRow() >= 0:
            self.current_index = self.song_list.currentRow()
            self.load_and_play(self.songs[self.current_index])

    def load_and_play(self, song_path):
        mixer.music.load(song_path)
        mixer.music.play()
        self.now_playing.setText(f"Now Playing: {os.path.basename(song_path)}")
        mixer.music.set_volume(self.volume_slider.value() / 100)
        self.timer.start(1000)  # Update progress every second

    def pause_song(self):
        mixer.music.pause()

    def resume_song(self):
        mixer.music.unpause()

    def stop_song(self):
        mixer.music.stop()
        self.now_playing.setText("Now Playing: None")

    def next_song(self):
        if self.songs:
            self.current_index = (self.current_index + 1) % len(self.songs)
            self.load_and_play(self.songs[self.current_index])
            self.song_list.setCurrentRow(self.current_index)

    def previous_song(self):
        if self.songs:
            self.current_index = (self.current_index - 1) % len(self.songs)
            self.load_and_play(self.songs[self.current_index])
            self.song_list.setCurrentRow(self.current_index)

    def toggle_shuffle(self):
        self.is_shuffling = not self.is_shuffling
        if self.is_shuffling:
            random.shuffle(self.songs)
            self.song_list.clear()
            for song in self.songs:
                self.song_list.addItem(os.path.basename(song))
        print("Shuffle:", self.is_shuffling)

    def set_volume(self, value):
        mixer.music.set_volume(value / 100)

    def search_song(self):
        search_text = self.search_bar.text().lower()
        for i in range(self.song_list.count()):
            item = self.song_list.item(i)
            item.setHidden(search_text not in item.text().lower())

    def update_progress(self):
        if mixer.music.get_busy():
            current_pos = mixer.music.get_pos() // 1000
            song_length = MP3(self.songs[self.current_index]).info.length
            progress = int((current_pos / song_length) * 100)
            self.progress_slider.setValue(progress)

    def set_progress(self, value):
        """Seek to a specific position in the song."""
        if self.songs:
            song_length = MP3(self.songs[self.current_index]).info.length
            seek_time = (value / 100) * song_length
            mixer.music.play(start=seek_time)

app = QApplication(sys.argv)
window = UltimateMusicPlayer()
window.show()
sys.exit(app.exec())
